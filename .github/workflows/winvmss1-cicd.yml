# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: msdn

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
    - run: echo "Your repository has been copied to the path ${{ github.workspace }} on the runner."
    - run: echo "The workflow is now ready to test your code on the runner."
    
    # uses the sp output stored as a secret
    - name: Login via Azure CLI
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Azure KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ secrets.IAC_KEYVAULT }} # name of key vault in Azure portal
        secrets: ARM-ACCESS-KEY, ARM-CLIENT-ID, ARM-CLIENT-SECRET, ARM-SUBSCRIPTION-ID, ARM-TENANT-ID, VM-ACCOUNT, VM-PASSWORD # comma separated list of secret keys to fetch from key vault 
      id: GetNumptyPasswords # ID for secrets that you will reference

    # Display the event that triggered the workflow
    - run: echo "The job was triggered by a ${{ github.event_name }} event."
    
    # Runner information
    - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub"
    
    # Information about the repository and branch
    - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

    # Information about the repository and branch
    - run: echo "I sense you password is maybe ${{ steps.GetNumptyPasswords.outputs.VM-PASSWORD }} and your repository is ${{ github.repository }}."
    
    - name: conditional step when event name is pull request
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "This event is a pull request"
    
    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}
    
    - name: Setup dotnet on runner
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.x'
    
    - name: Display dotnet version
      run: dotnet --version
    
    - run: echo "The preinstalled tools are located here on the runner ${{ runner.tool_cache }}."
    
    - name: List files in tool cache
      run: |
        ls ${{ runner.tool_cache }}
    
    - run: echo "This job's status is ${{ job.status }}."

    # - uses: Azure/get-keyvault-secrets@v1
    #   with: 
    #     keyvault: "containervault"
    #     secrets: 'containerPassword, containerUsername'
    #   id: myGetSecretAction
    # - uses: azure/docker-login@v1
    #   with:
    #     login-server: myregistry.azurecr.io
    #     username: ${{ steps.myGetSecretAction.outputs.containerUsername }}
    #     password: ${{ steps.myGetSecretAction.outputs.containerPassword }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a the IAC spn
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.1.2 # optional, default is latest

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
